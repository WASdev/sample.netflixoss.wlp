import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'liberty'
apply plugin: 'war'

repositories {
    mavenCentral()
}

buildscript {
	repositories {
		mavenLocal()
		maven
		{	name = 'WASdev Repository'
			url = 'http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/maven/repository/'
		}
    }
	
    dependencies {
        classpath 'com.ibm.websphere.wlp.gradle.plugins:liberty-gradle-plugin:1.0' 
		classpath fileTree(dir: wlpDir+'/bin/tools', include: 'ws-server.jar')
		classpath fileTree(dir: wlpDir+'/dev/spi/ibm', include: '*.jar')
		classpath fileTree(dir: wlpDir+'/lib', include: '*.jar')
    }
}

dependencies {
    providedCompile 'com.netflix.archaius:archaius-core:0.5.12'
    providedCompile 'com.netflix.hystrix:hystrix-core:1.2.2'
    providedCompile 'org.slf4j:slf4j-api:1.6.4'
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    testCompile 'junit:junit:3.8.1'
}

test.dependsOn deployWar
libertyStart.dependsOn libertyCreate

libertyCreate << {
    copy {
       from 'src/test/resources'
       into "${buildDir}/wlp/servers/defaultServer"
    }
}

configurations {
    features
}

dependencies {
    features project(path: ':ws-netflixoss', configuration: 'feature')
}

libertyCreate << {
    exec {
        environment 'WLP_USER_DIR', "${buildDir}/wlp"
        commandLine file("${wlpDir}/bin/featureManager" + (Os.isFamily(Os.FAMILY_WINDOWS) ? '.bat' : '')), 'install', configurations.features.singleFile
    }
}

test.finalizedBy libertyStop

liberty {
	wlpDir=project.wlpDir
	outputDir=null
	userDir=null
	serverName=project.serverName
}